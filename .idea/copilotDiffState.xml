<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/README.md" />
              <option name="updatedContent" value="# Futuristic Chatbot Frontend&#10;&#10;This is a client-side-only (SPA) chatbot application built with the latest Next.js and React, featuring a futuristic theme.&#10;&#10;## Getting Started&#10;&#10;### Prerequisites&#10;- Node.js (18.x or later recommended)&#10;- npm (comes with Node.js)&#10;&#10;### Installation&#10;1. Open a terminal in the `frontend` directory.&#10;2. Install dependencies:&#10;   ```bash&#10;   npm install&#10;   ```&#10;&#10;### Running the Application&#10;Start the development server:&#10;```bash&#10;npm run dev&#10;```&#10;&#10;The app will be available at [http://localhost:3000](http://localhost:3000).&#10;&#10;### Build for Production&#10;To build the app for production:&#10;```bash&#10;npm run build&#10;npm start&#10;```&#10;&#10;## Features&#10;- Single Page Application (SPA) — no SSR&#10;- Modern, futuristic UI&#10;- Chat interface with scrollable history and input field&#10;&#10;## API Connection&#10;This frontend expects a backend API at `/api/chat` that accepts POST requests with `{ message: string }` and returns `{ response: string }`.&#10;&#10;---&#10;&#10;For more details, see the API folder in this project.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/app/api/chat/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/app/api/chat/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;export async function POST(req: NextRequest) {&#10;  try {&#10;    const body = await req.json();&#10;    const apiRes = await fetch('http://localhost:8000/api/chat', {&#10;      method: 'POST',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(body),&#10;    });&#10;    const text = await apiRes.text();&#10;    // Try to parse as JSON, fallback to text&#10;    try {&#10;      const data = JSON.parse(text);&#10;      return NextResponse.json(data, { status: apiRes.status });&#10;    } catch {&#10;      return new NextResponse(text, { status: apiRes.status });&#10;    }&#10;  } catch (err) {&#10;    return NextResponse.json({ response: 'Proxy error: ' + (err instanceof Error ? err.message : 'Unknown error') }, { status: 500 });&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/app/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/app/globals.css" />
              <option name="originalContent" value="body {&#10;  background: linear-gradient(135deg, #0f2027, #2c5364 80%);&#10;  color: #e0e6ed;&#10;  font-family: 'Inter', 'Roboto', Arial, sans-serif;&#10;  height: 100vh;&#10;  min-height: 100vh;&#10;  margin: 0;&#10;  overflow: hidden;&#10;  padding-top: 24px;&#10;  padding-bottom: 24px;&#10;}&#10;&#10;.chat-container {&#10;  max-width: 480px;&#10;  margin: 32px auto 32px auto;&#10;  background: rgba(30, 40, 60, 0.95);&#10;  border-radius: 18px;&#10;  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);&#10;  padding: 32px 24px 24px 24px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;  border: 1.5px solid #3a506b;&#10;  box-sizing: border-box;&#10;  height: 100vh;&#10;  min-height: 100vh;&#10;}&#10;&#10;.title {&#10;  text-align: center;&#10;  font-size: 2.2rem;&#10;  font-weight: 700;&#10;  letter-spacing: 2px;&#10;  margin-bottom: 18px;&#10;  color: #7fffd4;&#10;  text-shadow: 0 0 8px #00f2fe, 0 0 2px #7fffd4;&#10;  flex-shrink: 0;&#10;}&#10;&#10;.chat-box {&#10;  background: rgba(20, 30, 40, 0.85);&#10;  border-radius: 12px;&#10;  flex: 1 1 0;&#10;  min-height: 0;&#10;  max-height: none;&#10;  height: auto;&#10;  margin-bottom: 18px;&#10;  overflow-y: auto;&#10;  padding: 18px 12px;&#10;  box-shadow: 0 2px 8px 0 rgba(0,255,255,0.08);&#10;  border: 1px solid #3a506b;&#10;}&#10;&#10;.message {&#10;  margin-bottom: 12px;&#10;  padding: 10px 16px;&#10;  border-radius: 8px;&#10;  max-width: 80%;&#10;  word-break: break-word;&#10;  font-size: 1.08rem;&#10;  box-shadow: 0 1px 4px 0 rgba(0,255,255,0.04);&#10;}&#10;&#10;.message.user {&#10;  background: linear-gradient(90deg, #00f2fe 0%, #4facfe 100%);&#10;  color: #1a232e;&#10;  align-self: flex-end;&#10;  margin-left: auto;&#10;  font-weight: 500;&#10;}&#10;&#10;.message.bot {&#10;  background: linear-gradient(90deg, #232526 0%, #414345 100%);&#10;  color: #7fffd4;&#10;  align-self: flex-start;&#10;  margin-right: auto;&#10;  font-style: italic;&#10;}&#10;&#10;.input-row {&#10;  display: flex;&#10;  gap: 10px;&#10;  margin-top: 8px;&#10;  flex-shrink: 0;&#10;}&#10;&#10;.chat-input {&#10;  flex: 1;&#10;  padding: 12px 14px;&#10;  border-radius: 8px;&#10;  border: 1px solid #3a506b;&#10;  background: #1a232e;&#10;  color: #e0e6ed;&#10;  font-size: 1rem;&#10;  outline: none;&#10;  transition: border 0.2s;&#10;}&#10;&#10;.chat-input:focus {&#10;  border: 1.5px solid #7fffd4;&#10;  background: #232b38;&#10;}&#10;&#10;.send-btn {&#10;  background: linear-gradient(90deg, #00f2fe 0%, #7fffd4 100%);&#10;  color: #1a232e;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 0 22px;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  box-shadow: 0 2px 8px 0 rgba(0,255,255,0.10);&#10;  transition: background 0.2s, color 0.2s;&#10;}&#10;&#10;.send-btn:hover {&#10;  background: linear-gradient(90deg, #7fffd4 0%, #00f2fe 100%);&#10;  color: #232b38;&#10;}&#10;&#10;.settings-btn {&#10;  background: none;&#10;  border: none;&#10;  font-size: 1.5rem;&#10;  cursor: pointer;&#10;  color: #7fffd4;&#10;  margin-left: 12px;&#10;  transition: color 0.2s;&#10;}&#10;&#10;.settings-btn:hover {&#10;  color: #00f2fe;&#10;}&#10;&#10;.settings-modal {&#10;  position: fixed;&#10;  top: 0; left: 0; right: 0; bottom: 0;&#10;  background: rgba(15,32,39,0.85);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 1000;&#10;}&#10;&#10;.settings-content {&#10;  background: #232b38;&#10;  border-radius: 12px;&#10;  padding: 32px 28px 24px 28px;&#10;  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);&#10;  border: 1.5px solid #3a506b;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: stretch;&#10;  min-width: 320px;&#10;  color: #e0e6ed;&#10;}&#10;&#10;.settings-content label {&#10;  font-size: 1.1rem;&#10;  margin-bottom: 6px;&#10;  color: #7fffd4;&#10;}&#10;&#10;main.chat-container {&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;  height: auto;&#10;}&#10;&#10;@media (max-width: 600px) {&#10;  .chat-container {&#10;    margin: 12px 6px 12px 6px;&#10;    padding: 16px 6px 12px 6px;&#10;    border-radius: 10px;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="body {&#10;  background: linear-gradient(135deg, #0f2027, #2c5364 80%);&#10;  color: #e0e6ed;&#10;  font-family: 'Inter', 'Roboto', Arial, sans-serif;&#10;  height: 100dvh;&#10;  min-height: 100dvh;&#10;  margin: 0;&#10;  overflow: hidden;&#10;  padding-top: 24px;&#10;  padding-bottom: 24px;&#10;  box-sizing: border-box;&#10;}&#10;&#10;.chat-container {&#10;  max-width: 480px;&#10;  margin: 0 auto;&#10;  background: rgba(30, 40, 60, 0.95);&#10;  border-radius: 18px;&#10;  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);&#10;  padding: 32px 24px 24px 24px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;  border: 1.5px solid #3a506b;&#10;  box-sizing: border-box;&#10;  height: calc(100dvh - 48px); /* 24px top + 24px bottom padding */&#10;  min-height: calc(100dvh - 48px);&#10;}&#10;&#10;.title {&#10;  text-align: center;&#10;  font-size: 2.2rem;&#10;  font-weight: 700;&#10;  letter-spacing: 2px;&#10;  margin-bottom: 18px;&#10;  color: #7fffd4;&#10;  text-shadow: 0 0 8px #00f2fe, 0 0 2px #7fffd4;&#10;  flex-shrink: 0;&#10;}&#10;&#10;.chat-box {&#10;  background: rgba(20, 30, 40, 0.85);&#10;  border-radius: 12px;&#10;  flex: 1 1 0;&#10;  min-height: 0;&#10;  max-height: none;&#10;  height: auto;&#10;  margin-bottom: 18px;&#10;  overflow-y: auto;&#10;  padding: 18px 12px;&#10;  box-shadow: 0 2px 8px 0 rgba(0,255,255,0.08);&#10;  border: 1px solid #3a506b;&#10;}&#10;&#10;.message {&#10;  margin-bottom: 12px;&#10;  padding: 10px 16px;&#10;  border-radius: 8px;&#10;  max-width: 80%;&#10;  word-break: break-word;&#10;  font-size: 1.08rem;&#10;  box-shadow: 0 1px 4px 0 rgba(0,255,255,0.04);&#10;}&#10;&#10;.message.user {&#10;  background: linear-gradient(90deg, #00f2fe 0%, #4facfe 100%);&#10;  color: #1a232e;&#10;  align-self: flex-end;&#10;  margin-left: auto;&#10;  font-weight: 500;&#10;}&#10;&#10;.message.bot {&#10;  background: linear-gradient(90deg, #232526 0%, #414345 100%);&#10;  color: #7fffd4;&#10;  align-self: flex-start;&#10;  margin-right: auto;&#10;  font-style: italic;&#10;}&#10;&#10;.input-row {&#10;  display: flex;&#10;  gap: 10px;&#10;  margin-top: 8px;&#10;  flex-shrink: 0;&#10;}&#10;&#10;.chat-input {&#10;  flex: 1;&#10;  padding: 12px 14px;&#10;  border-radius: 8px;&#10;  border: 1px solid #3a506b;&#10;  background: #1a232e;&#10;  color: #e0e6ed;&#10;  font-size: 1rem;&#10;  outline: none;&#10;  transition: border 0.2s;&#10;}&#10;&#10;.chat-input:focus {&#10;  border: 1.5px solid #7fffd4;&#10;  background: #232b38;&#10;}&#10;&#10;.send-btn {&#10;  background: linear-gradient(90deg, #00f2fe 0%, #7fffd4 100%);&#10;  color: #1a232e;&#10;  border: none;&#10;  border-radius: 8px;&#10;  padding: 0 22px;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  box-shadow: 0 2px 8px 0 rgba(0,255,255,0.10);&#10;  transition: background 0.2s, color 0.2s;&#10;}&#10;&#10;.send-btn:hover {&#10;  background: linear-gradient(90deg, #7fffd4 0%, #00f2fe 100%);&#10;  color: #232b38;&#10;}&#10;&#10;.settings-btn {&#10;  background: none;&#10;  border: none;&#10;  font-size: 1.5rem;&#10;  cursor: pointer;&#10;  color: #7fffd4;&#10;  margin-left: 12px;&#10;  transition: color 0.2s;&#10;}&#10;&#10;.settings-btn:hover {&#10;  color: #00f2fe;&#10;}&#10;&#10;.settings-modal {&#10;  position: fixed;&#10;  top: 0; left: 0; right: 0; bottom: 0;&#10;  background: rgba(15,32,39,0.85);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  z-index: 1000;&#10;}&#10;&#10;.settings-content {&#10;  background: #232b38;&#10;  border-radius: 12px;&#10;  padding: 32px 28px 24px 28px;&#10;  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);&#10;  border: 1.5px solid #3a506b;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: stretch;&#10;  min-width: 320px;&#10;  color: #e0e6ed;&#10;}&#10;&#10;.settings-content label {&#10;  font-size: 1.1rem;&#10;  margin-bottom: 6px;&#10;  color: #7fffd4;&#10;}&#10;&#10;main.chat-container {&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;  height: auto;&#10;}&#10;&#10;@media (max-width: 600px) {&#10;  .chat-container {&#10;    margin: 0 6px;&#10;    height: calc(100dvh - 24px);&#10;    min-height: calc(100dvh - 24px);&#10;    padding: 16px 6px 12px 6px;&#10;    border-radius: 10px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/app/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/app/layout.tsx" />
              <option name="updatedContent" value="import './globals.css';&#10;import type { Metadata } from 'next';&#10;import { Inter } from 'next/font/google';&#10;&#10;const inter = Inter({ subsets: ['latin'] });&#10;&#10;export const metadata: Metadata = {&#10;  title: 'futuristic chatbot',&#10;  description: 'A futuristic themed chatbot SPA',&#10;};&#10;&#10;export default function RootLayout({&#10;  children,&#10;}: {&#10;  children: React.ReactNode;&#10;}) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;      &lt;body className={inter.className}&gt;{children}&lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/app/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useState, useRef, useEffect } from &quot;react&quot;;&#10;&#10;function getApiKey() {&#10;  if (typeof window === &quot;undefined&quot;) return &quot;&quot;;&#10;  return localStorage.getItem(&quot;openai_api_key&quot;) || &quot;&quot;;&#10;}&#10;&#10;function setApiKey(key: string) {&#10;  if (typeof window === &quot;undefined&quot;) return;&#10;  localStorage.setItem(&quot;openai_api_key&quot;, key);&#10;}&#10;&#10;export default function Home() {&#10;  const [messages, setMessages] = useState([&#10;    { sender: &quot;bot&quot;, text: &quot;Hello! How can I help you today?&quot; },&#10;  ]);&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [showSettings, setShowSettings] = useState(false);&#10;  const [apiKey, setApiKeyState] = useState(getApiKey());&#10;  const messagesEndRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    messagesEndRef.current?.scrollIntoView({ behavior: &quot;smooth&quot; });&#10;  }, [messages]);&#10;&#10;  const handleSettings = () =&gt; {&#10;    setShowSettings(true);&#10;  };&#10;&#10;  const handleApiKeySave = () =&gt; {&#10;    setApiKey(apiKey);&#10;    setShowSettings(false);&#10;  };&#10;&#10;  const sendMessage = async () =&gt; {&#10;    if (!input.trim()) return;&#10;    const userMessage = { sender: &quot;user&quot;, text: input };&#10;    setMessages((msgs) =&gt; [...msgs, userMessage]);&#10;    setInput(&quot;&quot;);&#10;&#10;    try {&#10;      console.log(&quot;Sending request to /api/chat&quot;, {&#10;        developer_message: &quot;&quot;,&#10;        user_message: input,&#10;        api_key: getApiKey(),&#10;      });&#10;      const res = await fetch(&quot;/api/chat&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({&#10;          developer_message: &quot;&quot;,&#10;          user_message: input,&#10;          api_key: getApiKey(),&#10;        }),&#10;      });&#10;      console.log(&quot;Response status:&quot;, res.status);&#10;      const contentType = res.headers.get(&quot;content-type&quot;);&#10;      console.log(&quot;Response content-type:&quot;, contentType);&#10;      let botResponse;&#10;      if (contentType &amp;&amp; contentType.includes(&quot;application/json&quot;)) {&#10;        try {&#10;          const text = await res.text();&#10;          console.log(&quot;Raw response text (json branch):&quot;, text);&#10;          const data = JSON.parse(text);&#10;          console.log(&quot;API response data (json):&quot;, data);&#10;          botResponse = data.response || JSON.stringify(data);&#10;        } catch (jsonErr) {&#10;          console.error(&quot;Failed to parse JSON:&quot;, jsonErr);&#10;          const text = await res.text();&#10;          console.log(&quot;Raw response text after JSON parse fail:&quot;, text);&#10;          botResponse = text;&#10;        }&#10;      } else {&#10;        botResponse = await res.text();&#10;        console.log(&quot;API response data (text):&quot;, botResponse);&#10;      }&#10;      setMessages((msgs) =&gt; [...msgs, { sender: &quot;bot&quot;, text: botResponse }]);&#10;    } catch (err) {&#10;      console.error(&quot;Error connecting to the bot:&quot;, err);&#10;      setMessages((msgs) =&gt; [&#10;        ...msgs,&#10;        { sender: &quot;bot&quot;, text: &quot;Sorry, there was an error connecting to the bot.&quot; },&#10;      ]);&#10;    }&#10;  };&#10;&#10;  const handleKeyDown = (e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    if (e.key === &quot;Enter&quot;) sendMessage();&#10;  };&#10;&#10;  return (&#10;    &lt;main className=&quot;chat-container&quot;&gt;&#10;      &lt;div style={{ display: &quot;flex&quot;, justifyContent: &quot;space-between&quot;, alignItems: &quot;center&quot; }}&gt;&#10;        &lt;h1 className=&quot;title&quot;&gt;Futuristic Chatbot&lt;/h1&gt;&#10;        &lt;button className=&quot;settings-btn&quot; onClick={handleSettings} title=&quot;Settings&quot;&gt;&#10;          ⚙️&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      {showSettings &amp;&amp; (&#10;        &lt;div className=&quot;settings-modal&quot;&gt;&#10;          &lt;div className=&quot;settings-content&quot;&gt;&#10;            &lt;label htmlFor=&quot;api-key-input&quot;&gt;Enter OpenAI API Key:&lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;api-key-input&quot;&#10;              type=&quot;password&quot;&#10;              value={apiKey}&#10;              onChange={(e) =&gt; setApiKeyState(e.target.value)}&#10;              className=&quot;chat-input&quot;&#10;              style={{ margin: &quot;12px 0&quot; }}&#10;            /&gt;&#10;            &lt;div style={{ display: &quot;flex&quot;, gap: 8 }}&gt;&#10;              &lt;button className=&quot;send-btn&quot; onClick={handleApiKeySave}&gt;&#10;                Save&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                className=&quot;send-btn&quot;&#10;                style={{ background: &quot;#333&quot;, color: &quot;#fff&quot; }}&#10;                onClick={() =&gt; setShowSettings(false)}&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      &lt;div className=&quot;chat-box&quot;&gt;&#10;        {messages.map((msg, idx) =&gt; (&#10;          &lt;div key={idx} className={`message ${msg.sender}`}&gt;&#10;            {msg.text}&#10;          &lt;/div&gt;&#10;        ))}&#10;        &lt;div ref={messagesEndRef} /&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;input-row&quot;&gt;&#10;        &lt;input&#10;          className=&quot;chat-input&quot;&#10;          value={input}&#10;          onChange={(e) =&gt; setInput(e.target.value)}&#10;          onKeyDown={handleKeyDown}&#10;          placeholder=&quot;Type your message...&quot;&#10;        /&gt;&#10;        &lt;button className=&quot;send-btn&quot; onClick={sendMessage}&gt;&#10;          Send&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useState, useRef, useEffect } from &quot;react&quot;;&#10;&#10;function getApiKey() {&#10;  if (typeof window === &quot;undefined&quot;) return &quot;&quot;;&#10;  return localStorage.getItem(&quot;openai_api_key&quot;) || &quot;&quot;;&#10;}&#10;&#10;function setApiKey(key: string) {&#10;  if (typeof window === &quot;undefined&quot;) return;&#10;  localStorage.setItem(&quot;openai_api_key&quot;, key);&#10;}&#10;&#10;export default function Home() {&#10;  const [messages, setMessages] = useState([&#10;    { sender: &quot;bot&quot;, text: &quot;Hello! How can I help you today?&quot; },&#10;  ]);&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [showSettings, setShowSettings] = useState(false);&#10;  const [apiKey, setApiKeyState] = useState(getApiKey());&#10;  const messagesEndRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    messagesEndRef.current?.scrollIntoView({ behavior: &quot;smooth&quot; });&#10;  }, [messages]);&#10;&#10;  const handleSettings = () =&gt; {&#10;    setShowSettings(true);&#10;  };&#10;&#10;  const handleApiKeySave = () =&gt; {&#10;    setApiKey(apiKey);&#10;    setShowSettings(false);&#10;  };&#10;&#10;  const sendMessage = async () =&gt; {&#10;    if (!input.trim()) return;&#10;    const userMessage = { sender: &quot;user&quot;, text: input };&#10;    setMessages((msgs) =&gt; [...msgs, userMessage]);&#10;    setInput(&quot;&quot;);&#10;&#10;    try {&#10;      console.log(&quot;Sending request to /api/chat&quot;, {&#10;        developer_message: &quot;&quot;,&#10;        user_message: input,&#10;        api_key: getApiKey(),&#10;      });&#10;      const res = await fetch(&quot;/api/chat&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({&#10;          developer_message: &quot;&quot;,&#10;          user_message: input,&#10;          api_key: getApiKey(),&#10;        }),&#10;      });&#10;      console.log(&quot;Response status:&quot;, res.status);&#10;      const contentType = res.headers.get(&quot;content-type&quot;);&#10;      console.log(&quot;Response content-type:&quot;, contentType);&#10;      let botResponse;&#10;      if (contentType &amp;&amp; contentType.includes(&quot;application/json&quot;)) {&#10;        try {&#10;          const text = await res.text();&#10;          console.log(&quot;Raw response text (json branch):&quot;, text);&#10;          const data = JSON.parse(text);&#10;          console.log(&quot;API response data (json):&quot;, data);&#10;          botResponse = data.response || JSON.stringify(data);&#10;        } catch (jsonErr) {&#10;          console.error(&quot;Failed to parse JSON:&quot;, jsonErr);&#10;          const text = await res.text();&#10;          console.log(&quot;Raw response text after JSON parse fail:&quot;, text);&#10;          botResponse = text;&#10;        }&#10;      } else {&#10;        botResponse = await res.text();&#10;        console.log(&quot;API response data (text):&quot;, botResponse);&#10;      }&#10;      setMessages((msgs) =&gt; [...msgs, { sender: &quot;bot&quot;, text: botResponse }]);&#10;    } catch (err) {&#10;      console.error(&quot;Error connecting to the bot:&quot;, err);&#10;      setMessages((msgs) =&gt; [&#10;        ...msgs,&#10;        { sender: &quot;bot&quot;, text: &quot;Sorry, there was an error connecting to the bot.&quot; },&#10;      ]);&#10;    }&#10;  };&#10;&#10;  const handleKeyDown = (e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    if (e.key === &quot;Enter&quot;) sendMessage();&#10;  };&#10;&#10;  return (&#10;    &lt;main className=&quot;chat-container&quot;&gt;&#10;      &lt;div style={{ display: &quot;flex&quot;, justifyContent: &quot;space-between&quot;, alignItems: &quot;center&quot; }}&gt;&#10;        &lt;h1 className=&quot;title&quot;&gt;Carty Chatbot&lt;/h1&gt;&#10;        &lt;button className=&quot;settings-btn&quot; onClick={handleSettings} title=&quot;Settings&quot;&gt;&#10;          ⚙️&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      {showSettings &amp;&amp; (&#10;        &lt;div className=&quot;settings-modal&quot;&gt;&#10;          &lt;div className=&quot;settings-content&quot;&gt;&#10;            &lt;label htmlFor=&quot;api-key-input&quot;&gt;Enter OpenAI API Key:&lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;api-key-input&quot;&#10;              type=&quot;password&quot;&#10;              value={apiKey}&#10;              onChange={(e) =&gt; setApiKeyState(e.target.value)}&#10;              className=&quot;chat-input&quot;&#10;              style={{ margin: &quot;12px 0&quot; }}&#10;            /&gt;&#10;            &lt;div style={{ display: &quot;flex&quot;, gap: 8 }}&gt;&#10;              &lt;button className=&quot;send-btn&quot; onClick={handleApiKeySave}&gt;&#10;                Save&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                className=&quot;send-btn&quot;&#10;                style={{ background: &quot;#333&quot;, color: &quot;#fff&quot; }}&#10;                onClick={() =&gt; setShowSettings(false)}&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      &lt;div className=&quot;chat-box&quot;&gt;&#10;        {messages.map((msg, idx) =&gt; (&#10;          &lt;div key={idx} className={`message ${msg.sender}`}&gt;&#10;            {msg.text}&#10;          &lt;/div&gt;&#10;        ))}&#10;        &lt;div ref={messagesEndRef} /&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;input-row&quot;&gt;&#10;        &lt;input&#10;          className=&quot;chat-input&quot;&#10;          value={input}&#10;          onChange={(e) =&gt; setInput(e.target.value)}&#10;          onKeyDown={handleKeyDown}&#10;          placeholder=&quot;Type your message...&quot;&#10;        /&gt;&#10;        &lt;button className=&quot;send-btn&quot; onClick={sendMessage}&gt;&#10;          Send&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;frontend&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev&quot;,&#10;    &quot;build&quot;: &quot;next build&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;next&quot;: &quot;latest&quot;,&#10;    &quot;react&quot;: &quot;latest&quot;,&#10;    &quot;react-dom&quot;: &quot;latest&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;typescript&quot;: &quot;latest&quot;&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;frontend&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev&quot;,&#10;    &quot;build&quot;: &quot;next build&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;next&quot;: &quot;latest&quot;,&#10;    &quot;react&quot;: &quot;latest&quot;,&#10;    &quot;react-dom&quot;: &quot;latest&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;typescript&quot;: &quot;latest&quot;,&#10;    &quot;@types/react&quot;: &quot;latest&quot;,&#10;    &quot;@types/node&quot;: &quot;latest&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/proxy.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/proxy.json" />
              <option name="updatedContent" value="{&#10;  &quot;/api/chat&quot;: {&#10;    &quot;target&quot;: &quot;http://localhost:8000&quot;,&#10;    &quot;pathRewrite&quot;: {&quot;^/api/chat&quot;: &quot;/api/chat&quot;},&#10;    &quot;changeOrigin&quot;: true,&#10;    &quot;secure&quot;: false&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/api/chat/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/api/chat/route.ts" />
              <option name="updatedContent" value="import type { NextRequest } from 'next/server';&#10;&#10;export const runtime = 'edge';&#10;&#10;export async function POST(req: NextRequest) {&#10;  const { message } = await req.json();&#10;  try {&#10;    // Proxy to backend API (assumes backend runs on /api locally, or update as needed)&#10;    const backendRes = await fetch(process.env.BACKEND_URL || 'http://localhost:3000/api/chat', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ message }),&#10;    });&#10;    const data = await backendRes.json();&#10;    return new Response(JSON.stringify({ response: data.response }), {&#10;      status: 200,&#10;      headers: { 'Content-Type': 'application/json' },&#10;    });&#10;  } catch (e) {&#10;    return new Response(JSON.stringify({ response: 'Error contacting backend.' }), {&#10;      status: 500,&#10;      headers: { 'Content-Type': 'application/json' },&#10;    });&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/page.tsx" />
              <option name="originalContent" value="import Image from &quot;next/image&quot;;&#10;&#10;export default function Home() {&#10;  return (&#10;    &lt;div className=&quot;font-sans grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20&quot;&gt;&#10;      &lt;main className=&quot;flex flex-col gap-[32px] row-start-2 items-center sm:items-start&quot;&gt;&#10;        &lt;Image&#10;          className=&quot;dark:invert&quot;&#10;          src=&quot;/next.svg&quot;&#10;          alt=&quot;Next.js logo&quot;&#10;          width={180}&#10;          height={38}&#10;          priority&#10;        /&gt;&#10;        &lt;ol className=&quot;font-mono list-inside list-decimal text-sm/6 text-center sm:text-left&quot;&gt;&#10;          &lt;li className=&quot;mb-2 tracking-[-.01em]&quot;&gt;&#10;            Get started by editing{&quot; &quot;}&#10;            &lt;code className=&quot;bg-black/[.05] dark:bg-white/[.06] font-mono font-semibold px-1 py-0.5 rounded&quot;&gt;&#10;              src/app/page.tsx&#10;            &lt;/code&gt;&#10;            .&#10;          &lt;/li&gt;&#10;          &lt;li className=&quot;tracking-[-.01em]&quot;&gt;&#10;            Save and see your changes instantly.&#10;          &lt;/li&gt;&#10;        &lt;/ol&gt;&#10;&#10;        &lt;div className=&quot;flex gap-4 items-center flex-col sm:flex-row&quot;&gt;&#10;          &lt;a&#10;            className=&quot;rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto&quot;&#10;            href=&quot;https://vercel.com/new?utm_source=create-next-app&amp;utm_medium=appdir-template-tw&amp;utm_campaign=create-next-app&quot;&#10;            target=&quot;_blank&quot;&#10;            rel=&quot;noopener noreferrer&quot;&#10;          &gt;&#10;            &lt;Image&#10;              className=&quot;dark:invert&quot;&#10;              src=&quot;/vercel.svg&quot;&#10;              alt=&quot;Vercel logomark&quot;&#10;              width={20}&#10;              height={20}&#10;            /&gt;&#10;            Deploy now&#10;          &lt;/a&gt;&#10;          &lt;a&#10;            className=&quot;rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto md:w-[158px]&quot;&#10;            href=&quot;https://nextjs.org/docs?utm_source=create-next-app&amp;utm_medium=appdir-template-tw&amp;utm_campaign=create-next-app&quot;&#10;            target=&quot;_blank&quot;&#10;            rel=&quot;noopener noreferrer&quot;&#10;          &gt;&#10;            Read our docs&#10;          &lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;      &lt;footer className=&quot;row-start-3 flex gap-[24px] flex-wrap items-center justify-center&quot;&gt;&#10;        &lt;a&#10;          className=&quot;flex items-center gap-2 hover:underline hover:underline-offset-4&quot;&#10;          href=&quot;https://nextjs.org/learn?utm_source=create-next-app&amp;utm_medium=appdir-template-tw&amp;utm_campaign=create-next-app&quot;&#10;          target=&quot;_blank&quot;&#10;          rel=&quot;noopener noreferrer&quot;&#10;        &gt;&#10;          &lt;Image&#10;            aria-hidden&#10;            src=&quot;/file.svg&quot;&#10;            alt=&quot;File icon&quot;&#10;            width={16}&#10;            height={16}&#10;          /&gt;&#10;          Learn&#10;        &lt;/a&gt;&#10;        &lt;a&#10;          className=&quot;flex items-center gap-2 hover:underline hover:underline-offset-4&quot;&#10;          href=&quot;https://vercel.com/templates?framework=next.js&amp;utm_source=create-next-app&amp;utm_medium=appdir-template-tw&amp;utm_campaign=create-next-app&quot;&#10;          target=&quot;_blank&quot;&#10;          rel=&quot;noopener noreferrer&quot;&#10;        &gt;&#10;          &lt;Image&#10;            aria-hidden&#10;            src=&quot;/window.svg&quot;&#10;            alt=&quot;Window icon&quot;&#10;            width={16}&#10;            height={16}&#10;          /&gt;&#10;          Examples&#10;        &lt;/a&gt;&#10;        &lt;a&#10;          className=&quot;flex items-center gap-2 hover:underline hover:underline-offset-4&quot;&#10;          href=&quot;https://nextjs.org?utm_source=create-next-app&amp;utm_medium=appdir-template-tw&amp;utm_campaign=create-next-app&quot;&#10;          target=&quot;_blank&quot;&#10;          rel=&quot;noopener noreferrer&quot;&#10;        &gt;&#10;          &lt;Image&#10;            aria-hidden&#10;            src=&quot;/globe.svg&quot;&#10;            alt=&quot;Globe icon&quot;&#10;            width={16}&#10;            height={16}&#10;          /&gt;&#10;          Go to nextjs.org →&#10;        &lt;/a&gt;&#10;      &lt;/footer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useRef, useEffect } from &quot;react&quot;;&#10;&#10;export default function Home() {&#10;  const [messages, setMessages] = useState([&#10;    { sender: &quot;bot&quot;, text: &quot;Hello! How can I help you today?&quot; },&#10;  ]);&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const chatEndRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    chatEndRef.current?.scrollIntoView({ behavior: &quot;smooth&quot; });&#10;  }, [messages]);&#10;&#10;  async function sendMessage(e: React.FormEvent) {&#10;    e.preventDefault();&#10;    if (!input.trim()) return;&#10;    const userMessage = { sender: &quot;user&quot;, text: input };&#10;    setMessages((msgs) =&gt; [...msgs, userMessage]);&#10;    setLoading(true);&#10;    setInput(&quot;&quot;);&#10;    try {&#10;      const res = await fetch(&quot;/api/chat&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ message: userMessage.text }),&#10;      });&#10;      const data = await res.json();&#10;      setMessages((msgs) =&gt; [&#10;        ...msgs,&#10;        { sender: &quot;bot&quot;, text: data.response || &quot;(No response)&quot; },&#10;      ]);&#10;    } catch {&#10;      setMessages((msgs) =&gt; [&#10;        ...msgs,&#10;        { sender: &quot;bot&quot;, text: &quot;Sorry, there was an error.&quot; },&#10;      ]);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-[#0f2027] via-[#2c5364] to-[#232526] text-[#ededed] font-sans p-4&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex flex-col rounded-2xl shadow-2xl border border-[#2c5364] bg-[#181c1f]/80 backdrop-blur-md p-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold mb-4 text-cyan-400 tracking-wide text-center futuristic-glow&quot;&gt;&#10;          AI Chatbot&#10;        &lt;/h1&gt;&#10;        &lt;div className=&quot;flex-1 overflow-y-auto mb-4 h-80 scrollbar-thin scrollbar-thumb-cyan-700 scrollbar-track-transparent rounded-lg border border-[#232526] bg-[#232526]/60 p-4&quot; style={{ scrollbarColor: '#00fff7 #232526' }}&gt;&#10;          {messages.map((msg, idx) =&gt; (&#10;            &lt;div key={idx} className={`mb-3 flex ${msg.sender === &quot;user&quot; ? &quot;justify-end&quot; : &quot;justify-start&quot;}`}&gt;&#10;              &lt;div className={`px-4 py-2 rounded-xl max-w-[80%] text-sm shadow-md ${msg.sender === &quot;user&quot; ? &quot;bg-cyan-600 text-white&quot; : &quot;bg-[#232526] border border-cyan-700 text-cyan-200&quot;}`}&gt;&#10;                {msg.text}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;          &lt;div ref={chatEndRef} /&gt;&#10;        &lt;/div&gt;&#10;        &lt;form onSubmit={sendMessage} className=&quot;flex gap-2 mt-2&quot;&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            className=&quot;flex-1 rounded-lg px-4 py-2 bg-[#232526] border border-cyan-700 text-cyan-100 focus:outline-none focus:ring-2 focus:ring-cyan-400 transition placeholder-cyan-400&quot;&#10;            placeholder=&quot;Type your message...&quot;&#10;            value={input}&#10;            onChange={e =&gt; setInput(e.target.value)}&#10;            autoFocus&#10;            aria-label=&quot;Message input&quot;&#10;          /&gt;&#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;bg-cyan-500 hover:bg-cyan-400 text-white font-bold py-2 px-6 rounded-lg shadow-md transition disabled:opacity-50&quot;&#10;            disabled={loading || !input.trim()}&#10;          &gt;&#10;            {loading ? &quot;...&quot; : &quot;Send&quot;}&#10;          &lt;/button&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;      &lt;style jsx global&gt;{`&#10;        .futuristic-glow {&#10;          text-shadow: 0 0 8px #00fff7, 0 0 16px #00fff7;&#10;        }&#10;        .scrollbar-thin::-webkit-scrollbar {&#10;          width: 6px;&#10;        }&#10;        .scrollbar-thin::-webkit-scrollbar-thumb {&#10;          background: #00fff7;&#10;          border-radius: 8px;&#10;        }&#10;      `}&lt;/style&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>